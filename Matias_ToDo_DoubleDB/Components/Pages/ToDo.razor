@using Matias_ToDo_DoubleDB.Data.Models.Entities;
@inject Code.Services.IToDoService _todoService
@inject IHttpContextAccessor httpContextAccessor
@inject ILogger<ToDo> Logger
@inject AuthenticationStateProvider authStateProvider
@inject Code.Services.IRoleService _roleService
@inject IServiceProvider _serviceProvider

<PageTitle>ToDo</PageTitle>
<AuthorizeView>

    @* <button @onclick="() => refresh(true)" class="w-15 btn btn-lg btn-primary my-3">Refresh</button> *@
    <h4>Is Admin : @userIsAdmin</h4>

    <div class="w-50 bg-opacity-25 bg-black rounded-1" style="margin-inline: auto;">
        <div class="text-center py-2">
            <input @bind="newTaskTitle" placeholder="Task here" />
            <button @onclick="addTask" class="w-50 btn btn-md bg-info">Add</button><br />
            @if (userIsAdmin)
            {
                @if (taskList != null)
                {
                    @if (taskList.Count() > 0)
                    {
                        <button @onclick="deleteAllTasks" class="w-50 btn btn-md my-3 bg-warning">Remove all tasks</button>
                    }
                }
            }
        </div>
        @if (taskList != null)
        {
            <table>
                <tr>
                    <th>
                        Task
                    </th>
                    @if (userIsAdmin)
                    {
                        <th>Action</th>
                    }
                </tr>
                @foreach (ToDoItem task in taskList)
                {   
                <tr>
                    <td>
                        @task.Title
                    </td>
                    @if (userIsAdmin)
                    {
                        <td>
                                <button @onclick="() => removeItem(task.Id)" class="w-50 btn btn-md bg-danger">Remove</button>
                        </td>
                    }
                </tr>
                }

            </table>
        }
    </div>
</AuthorizeView>
<style>

    table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd;
    }
</style>

@code {
    private string newTaskTitle = string.Empty;
    List<ToDoItem> taskList;
    string userEmail = string.Empty;
    bool userIsAdmin = false;
    bool isLoading = false;

    private async Task refresh(bool response)
    {
        if (response && !isLoading)
        {
            isLoading = true;
            await getTaskList();
            await checkIfAdmin();
            clearFields();
            StateHasChanged();
            isLoading = false;
        }
    }

    private async Task checkIfAdmin()
    {
        userIsAdmin = await _roleService.IsUserAdmin(userEmail, _serviceProvider);
        await refresh(true);
    }

    private void clearFields()
    {
        newTaskTitle = string.Empty;
    }

    private async Task getTaskList()
    {
        taskList = await _todoService.GetTasks(httpContextAccessor?.HttpContext?.User?.Identity?.Name!);
    }

    protected override async Task OnInitializedAsync()
    {
        userEmail = httpContextAccessor!.HttpContext!.User!.Identity!.Name!;
        await refresh(true);
    }

    private async void addTask()
    {
        var response = await _todoService.AddTask(userEmail, newTaskTitle);
        await refresh(response);
    }
    private async void removeItem(Guid id)
    {
        var response = await _todoService.RemoveItem(userEmail, id);
        await refresh(response);
    }

    private async void deleteAllTasks()
    {
        var response = await _todoService.AdminDeleteAllTasks(userEmail);
        await refresh(response);
    }
}
